<%- include('includes/header') %>

<title>Heimursaga | Edit Draft Entry</title>

<%- include('includes/sidebar') %>

<%- include('includes/navbar') %>


<%- include('includes/overlay') %>


					<h1 class="h3 mb-3 text-center">Edit Draft Entry</h1>

					<div class="row">
						<!--<a class="small font-weight-bold mb-3 ml-3 col-md-8 offset-md-2" href="/draft/<%= draft._id %>">&laquo; Back to draft permalink</a>-->

						<form id="edit-draft" method="POST" enctype="multipart/form-data">


							<div class="card col-md-8 offset-md-2">
								<div class="card">
									<%- include('includes/flash') %>
									<div class="card-header">
										<h5 class="card-title mb-0">Place marker at location</h5>
										<small>click in the map to set/move the marker and log coordinates</small>
									</div>
									<div class="card-body">
										<div id="entrymap" style="height: 300px"></div>
									</div>
	
									<div class="card-body mb-3">
										<label class="form-label">Lng/Lat Coordinates</label>
										<input
										  required
										  class="form-control readonly"
										  type="text"
										  name="lnglatcoordinates"
										  id="lnglatcoordinates"
										  maxlength="0"
										  value="<%= JSON.stringify(draft.GeoJSONcoordinates.coordinates[0]) %>, <%= JSON.stringify(draft.GeoJSONcoordinates.coordinates[1]) %>"
										  onkeypress="return false;"
										/>
									</div>
	
								</div>
							</div>


																					<div class="card col-md-8 offset-md-2">
																						<div class="card-header">
																							<h5 class="card-title mb-0">3. Select Journey</h5>
																						</div>
																						<div class="card-body">
																							<% if (draft.journey) { %>
																								<label class="form-label">Current Journey: <b><%= draft.journey %></b></label>
																							<% } %>
							
																							<input class="form-select" list="journeyselect" id="journeyname" name="journeyname" maxlength="100" placeholder="Type or select to create, modify, or remove journey...">
														
																							<datalist id="journeyselect">
							
																								<% if (draft.journey) { %>
																									<option value="REMOVE JOURNEY" >
																								<% } %>
							
														
																								<% if (journeys) { %>
														
																									<% journeys.forEach(function(journey){ %>
																										<option value="<%= journey %>">
																									<% }) %>
																								<% } %>
																							</datalist>
														
																						</div>
																					</div>

						  
							<div class="col-md-8 offset-md-2">
							  <div class="card">
								<div class="card-header">
								  <h5 class="card-title mb-0">4. Write entry content</h5>
								</div>
								<div class="card-body">
								  <div class="mb-3">
									<label class="form-label">What</label>
									<label class="form-text text-muted">
									  - craft the perfect title and make it unique!</label
									>
									<input
									  required
									  name="title"
									  id="post-title"
									  class="form-control"
									  type="text"
									  value="<%= draft.title %>"
									/>
								  </div>
								  <div class="mb-3">
									<label class="form-label">Where</label>
									<label class="form-text text-muted">
									  - the place where it happened - the official name or your own
									  name</label
									>
									<input
									  required
									  name="place"
									  id="post-place"
									  class="form-control"
									  type="text"
									  value="<%= draft.place %>"
									/>
								  </div>
								  <div class="mb-3">
									<label class="form-label">When</label>
									<label class="form-text text-muted">
									  - date of occurence - may be different from the date you post</label
									>
									<input required name="datesingle" class="form-control" type="text" value="<%= draft.date %>"/>
								  </div>
								  <div class="mb-3">
									<label class="form-label">Tell Your Story</label>
									<label class="form-text text-muted">
									  - in 100-1,000 words - if there's more write a series!</label
									>
									<textarea required name="body" id="post-body" class="body-content tall-textarea form-control" word-limit="true" max-words="1000" min-words="100" type="text" rows="10"><%= draft.body %></textarea>
									<div class="text-muted form-text">
									Word Count: <span id="show">0</span>
									</div>
									<span></span>
									<div class="writing_error form-text text-danger"></div>

								</div>
								</div>
							  </div>
							</div>
						  
							<div class="col-md-8 offset-md-2">
								<div class="card">
								  <div class="card-header">
									<h5 class="card-title mb-0">5. Upload your photo</h5>
									<label class="form-text text-muted pt-3">
										Photos will be cropped to fit a 3:2 (landscape) aspect ratio and should be a minimum of 900x600px. For best results, edit your photo before upload. Photo uploads are optional.</label>

									</div>
								  <div class="card-body">


									<% if (draft.hasPhoto) { %>

									<div id="photo-module">
										<div class="mb-5 col-md-8 offset-md-2">
											<img src="https://f002.backblazeb2.com/file/heimursaga-entry-photos/<%= draft._id %>" class="img-fluid" alt="entry image">
										</div>
									</div>

									<% } %>


									<button id="photo-button" type="button" class="btn btn-secondary text-center mt-1" onclick="deletePhoto()">Update photo</button>

									
									<div id="upload-module" class="col-12 col-md-10 offset-md-1" hidden>

											<style>
												.filepond--root {
													z-index: 1 !important;
												}

												.filepond--drop-label {
													color: #4c4e53;
												}

												.filepond--label-action {
													text-decoration-color: #babdc0;
												}

												.filepond--panel-root {
													background-color: transparent;

												}

												.filepond--item-panel {
													background: transparent;
													border-radius: 0em;
													border-width: 0em;
												}

												.filepond--image-preview {
													background: white;
													height: 100%;
													width: 100%;
												}

												.filepond--item > .filepond--panel .filepond--panel-bottom {
													box-shadow: none;
													}

												.filepond--image-preview-overlay svg {
													display: none;
												}

												.filepond--file-info {
													display: none;
													top: 10em;
													color: black;
												}

												.filepond--file-status {
													display: none;
												}
												
												.filepond--file-action-button filepond--action-remove-item {
													display: none;
												}


												
											</style>
											
											<input type="file" 
												class="filepond"
												name="filepond"
												accept="image/png, image/jpeg"
											/>
									</div>

									<input type="text" id="photoindicator" name="photoindicator" hidden>


								  </div>
								</div>
							</div>

							<div class="col-md-8 offset-md-2">
							  <div class="card">
								<div class="card-header">
								  <h5 class="card-title mb-0">5. Update or post draft as entry</h5>
								</div>
								<div class="card-body">

									<div class="form-check">
										<input type="radio" class="form-check-input" name="flexRadioDefault" id="entrypublic" value="public" autocomplete="off" <% if (draft.privacy == "public") { %> checked <% } %>>
										<label class="form-check-label" for="entrypublic">Public</label>
								  	</div>
									<div class="form-check">
										<input type="radio" class="form-check-input" name="flexRadioDefault" id="entryprivate" value="private" autocomplete="off" <% if (draft.privacy == "private") { %> checked <% } %>>
										<label class="form-check-label" for="entryprivate">Private</label>
									</div>

									<% if (plan != undefined && plan != "none") { %>

									<div class="form-check">
										<input type="radio" class="form-check-input" name="flexRadioDefault" id="entrysponsors" value="sponsors" autocomplete="off" <% if (draft.privacy == "sponsors") { %> checked <% } %>>
										<label class="form-check-label" for="entrysponsors">Sponsors Only</label>
									</div>

									<% } %>

								<div class="pt-3">
									<button type="submit" onclick="return confirm('Are you sure you want to delete this draft? This action is irreversible.');" formaction="/draft/<%= draft._id %>/delete?_csrf=<%= csrfToken %>" class="btn btn-danger">Delete</button>
								 
									<button type="submit" onclick="showLoader()" formaction="/draft/<%= draft._id %>/edit?_csrf=<%= csrfToken %>" class="btn btn-secondary">Update</button>
									
									<button type="submit" onclick="showLoader()" id="submit-entry" formaction="/draft/<%= draft._id %>/post-entry?_csrf=<%= csrfToken %>" class="btn btn-primary" disabled>Post as Entry</button>  

								</div>
								
								</div>
							  </div>
							</div>
						  </form>
						  
					</div>

				</div>
			</main>

			<%- include('includes/footer') %>

	<script>


    var form = document.getElementById("edit-draft")
	var overlay = document.getElementById("overlay")
    var overlayQuote = document.getElementById("overlay-quote");
        
        
    function showLoader() {
		if (form.checkValidity()) {
			overlay.removeAttribute("hidden")
            randomIndex = Math.ceil((Math.random()*randomQuotes.length-1));
            newQuote = randomQuotes[randomIndex];
            overlayQuote.innerHTML = newQuote;

		}
	}

		/*function showLoader() {
			const form = document.getElementById("edit-draft")
			const overlay = document.getElementById("overlay")
			if (form.checkValidity()) {
				overlay.removeAttribute("hidden")
			}
		}*/


		function deletePhoto() {
			let photoModule = document.getElementById('photo-module')
			let uploadModule = document.getElementById('upload-module')
			let photoButton = document.getElementById('photo-button')
			photoButton.hidden = true
			uploadModule.hidden = false
			photoModule.hidden = true
			document.getElementById('photoindicator').value = 'delete'
		}

				// Add event trigger for change to textareas with limit
				$(document).on("input", "textarea[word-limit=true]", function() {


				// Get individual limits
				thisMin = parseInt($(this).attr("min-words"));
				thisMax = parseInt($(this).attr("max-words"));
				const submit = document.querySelector("#submit-entry")
				const coordinates = document.querySelector('#lnglatcoordinates')

				// Create array of words, skipping the blanks
				var removedBlanks = [];
				removedBlanks = $(this).val().split(/\s+/).filter(Boolean);

				// Get word count
				var wordCount = removedBlanks.length;

				// Remove extra words from string if over word limit
				if (wordCount > thisMax) {
						
					// Trim string, use slice to get the first 'n' values
					var trimmed = removedBlanks.slice(0, thisMax ).join(" ");
					
					// Add space to ensure further typing attempts to add a new word (rather than adding to penultimate word)
					$(this).val(trimmed + " ");
					
					}
					

				// Compare word count to limits and print message as appropriate
				if ( wordCount < thisMin) {

					$(this).parent().children(".writing_error").text("Word count under " + thisMin + ".");

				} else if (wordCount > thisMax) {

					$(this).parent().children(".writing_error").text("Word count over " + thisMax + ".");

				} else {
					
					// No issues, remove warning message
					$(this).parent().children(".writing_error").text("");

				}
				if ( wordCount < thisMin) {
		
					submit.setAttribute("disabled", true);

				} else if (wordCount > thisMax) {

					submit.setAttribute("disabled", true);
				
				} else {
					
					// No issues, remove warning message
					submit.removeAttribute("disabled");

				}

				if (coordinates.value() == "") {
					submit.setAttribute("disabled", true);
				} else {
					submit.removeAttribute("disabled");
				}

				});

				$(document).ready(function() {

					var inputVal=$("#post-body")

					// Get individual limits
					thisMin = 100;
					thisMax = 1000;
					const submit = document.querySelector("#submit-entry")
					const coordinates = document.querySelector('#lnglatcoordinates')

					// Create array of words, skipping the blanks
					var removedBlanks = [];
					removedBlanks = $(inputVal).val().split(/\s+/).filter(Boolean);

					// Get word count
					var wordCount = removedBlanks.length;

					// Remove extra words from string if over word limit
					if (wordCount > thisMax) {
							
						// Trim string, use slice to get the first 'n' values
						var trimmed = removedBlanks.slice(0, thisMax ).join(" ");
						
						// Add space to ensure further typing attempts to add a new word (rather than adding to penultimate word)
						$(inputVal).val(trimmed + " ");
						
						}
						

					// Compare word count to limits and print message as appropriate
					if ( wordCount < thisMin) {

						$(inputVal).parent().children(".writing_error").text("Word count under " + thisMin + ".");

					} else if (wordCount > thisMax) {

						$(inputVal).parent().children(".writing_error").text("Word count over " + thisMax + ".");

					} else {
						
						// No issues, remove warning message
						$(inputVal).parent().children(".writing_error").text("");

					}
					if ( wordCount < thisMin) {

						submit.setAttribute("disabled", true);

					} else if (wordCount > thisMax) {

						submit.setAttribute("disabled", true);

					} else {
						
						// No issues, remove warning message
						submit.removeAttribute("disabled");

					}

					if (coordinates.value() == "") {
						submit.setAttribute("disabled", true);
					} else {
						submit.removeAttribute("disabled");
					}

					});



		document.querySelector("#post-body")
			.addEventListener("keyup", function countWord() {
			let res = [];
			let str = this.value.replace(/[\t\n\r\.\?\!]/gm, " ").split(" ");
			str.map((s) => {
				let trimStr = s.trim();
				if (trimStr.length > 0) {
				res.push(trimStr);
				}
			});
		document.querySelector("#show").innerText = res.length;
		});

		function myFunction() {
			var copyText = document.getElementById("coordinates").value;
			document.getElementById("lnglatcoordinates").value = copyText;
			}


		document.addEventListener("DOMContentLoaded", function() {
			// Select2
			$(".select2").each(function() {
				$(this)
					.wrap("<div class=\"position-relative\"></div>")
					.select2({
						placeholder: "Select value",
						dropdownParent: $(this).parent()
					});
			})
			// Daterangepicker
			$("input[name=\"daterange\"]").daterangepicker({
				opens: "left"
			});
			$("input[name=\"datetimes\"]").daterangepicker({
				timePicker: true,
				opens: "left",
				startDate: moment().startOf("hour"),
				endDate: moment().startOf("hour").add(32, "hour"),
				locale: {
					format: "M/DD hh:mm A"
				}
			});
			$("input[name=\"datesingle\"]").daterangepicker({
				singleDatePicker: true,
				showDropdowns: true
			});
			var start = moment().subtract(29, "days");
			var end = moment();

			function cb(start, end) {
				$("#reportrange span").html(start.format("MMMM D, YYYY") + " - " + end.format("MMMM D, YYYY"));
			}
			$("#reportrange").daterangepicker({
				startDate: start,
				endDate: end,
				ranges: {
					"Today": [moment(), moment()],
					"Yesterday": [moment().subtract(1, "days"), moment().subtract(1, "days")],
					"Last 7 Days": [moment().subtract(6, "days"), moment()],
					"Last 30 Days": [moment().subtract(29, "days"), moment()],
					"This Month": [moment().startOf("month"), moment().endOf("month")],
					"Last Month": [moment().subtract(1, "month").startOf("month"), moment().subtract(1, "month").endOf("month")]
				}
			}, cb);
			cb(start, end);
			// Datetimepicker
			$('#datetimepicker-minimum').datetimepicker();
			$('#datetimepicker-view-mode').datetimepicker({
				viewMode: 'years'
			});
			$('#datetimepicker-time').datetimepicker({
				format: 'LT'
			});
			$('#datetimepicker-date').datetimepicker({
				format: 'L'
			});
		});	

	</script>
</body>

</html>