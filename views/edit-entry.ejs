<%- include('includes/header') %>

<title>Heimursaga | Edit Entry</title>

</head>

<%- include('includes/sidebar') %>

<%- include('includes/navbar') %>

<%- include('includes/overlay') %>


					<h1 class="h3 mb-3 text-center">Edit Entry</h1>

					<div class="row">
						<a class="small font-weight-bold mb-3 ml-3 col-md-8 offset-md-2" href="/entry/<%= entry._id %>">&laquo; Back to entry permalink</a>

						<div class="col-md-8 offset-md-2">
							<div class="card">

								<div class="card-header">
									<%- include('includes/flash') %>
									<h5 class="card-title mb-0">1. Navigate to marker location</h5>
								</div>
								<div class="card-body">

									<div class="entrymap" id="entrymap" style="height: 300px"></div>
								</div>
							</div>
						</div>

						<form id="edit-entry" method="POST" enctype="multipart/form-data">
							<div class="col-md-8 offset-md-2">
							  <div class="card">
								<div class="card-header">
								  <h5 class="card-title mb-0">2. Log marker coordinates</h5>
								</div>
								<div class="card-body">
								  
						  
								  <div class="mb-3">
									<output
									  class="form-control"
									  type="text"
									  name="coordinates"
									  id="coordinates"
									  hidden
									></output>
								  </div>
						  
								  <button
									type="button"
									class="btn btn-outline-secondary mb-3"
									onclick="myFunction()"
								  >
									Log Coordinates
								  </button>
						  
								  <div class="mb-3">
									<label class="form-label">Lng/Lat Coordinates</label>
									<label class="form-text text-muted">
									  - when your marker is in place, click "Log Coordinates" to capture
									  the coordinates</label
									>
									<input
									  class="form-control"
									  type="text"
									  name="lnglatcoordinates"
									  id="lnglatcoordinates"
									  value="<%= JSON.stringify(entry.GeoJSONcoordinates.coordinates[0]) %>, <%= JSON.stringify(entry.GeoJSONcoordinates.coordinates[1]) %>"
									  readonly
									/>
								  </div>
								</div>
							  </div>
							</div>
						  
							<div class="col-md-8 offset-md-2">
							  <div class="card">
								<div class="card-header">
								  <h5 class="card-title mb-0">3. Write entry content</h5>
								</div>
								<div class="card-body">
								  <div class="mb-3">
									<label class="form-label">What</label>
									<label class="form-text text-muted">
									  - craft the perfect title and make it unique!</label
									>
									<input
									  required
									  name="title"
									  id="post-title"
									  class="form-control"
									  type="text"
									  value="<%= entry.title %>"
									/>
								  </div>
								  <div class="mb-3">
									<label class="form-label">Where</label>
									<label class="form-text text-muted">
									  - the place where it happened - the official name or your own
									  name</label
									>
									<input
									  required
									  name="place"
									  id="post-place"
									  class="form-control"
									  type="text"
									  value="<%= entry.place %>"
									/>
								  </div>
								  <div class="mb-3">
									<label class="form-label">When</label>
									<label class="form-text text-muted">
									  - date of occurence - may be different from the date you post</label
									>
									<input required name="datesingle" class="form-control" type="text" value="<%= entry.date %>"/>
								  </div>
								  <div class="mb-3">
									<label class="form-label">Tell Your Story</label>
									<label class="form-text text-muted">
									  - in 100-1,000 words - if there's more write a series!</label
									>
									<textarea required name="body" id="post-body" class="body-content tall-textarea form-control" word-limit="true" max-words="1000" min-words="100" type="text" rows="10"><%= entry.body %></textarea>
									<div class="text-muted form-text">
									Word Count: <span id="show">0</span>
									</div>
									<span></span>
									<div class="writing_error form-text text-danger"></div>

								</div>
								</div>
							  </div>
							</div>

							<div class="col-md-8 offset-md-2">
								<div class="card">
								  <div class="card-header">
									<h5 class="card-title mb-0">4. Upload your photo</h5>
									<label class="form-text text-muted pt-3">
										Photos will be cropped to fit a 3:2 (landscape) aspect ratio and should be a minimum of 900x600px. For best results, edit your photo before upload. Photo uploads are optional.</label>

									</div>
								  <div class="card-body">

									<% if (entry.hasPhoto) { %>

										<div id="photo-module">
											<div class="mb-5 col-md-8 offset-md-2">
												<img src="https://f002.backblazeb2.com/file/heimursaga-entry-photos/<%= entry._id %>" class="img-fluid" alt="entry image">
											</div>
										</div>

									<% } else { %>

									<input type="text" id="nophoto" name="nophoto" hidden>

									<% } %>


									<input type="text" id="photoindicator" name="photoindicator" hidden>

									
										<button id="photo-button" type="button" class="btn btn-secondary text-center mt-1" onclick="deletePhoto()">Update photo</button>

										<div id="upload-module" class="col-md-8 offset-md-2" hidden>

											<style>
												.filepond--root {
													z-index: 1 !important;
												}

												.filepond--drop-label {
													color: #4c4e53;
												}

												.filepond--label-action {
													text-decoration-color: #babdc0;
												}

												.filepond--panel-root {
													background-color: transparent;

												}

												.filepond--item-panel {
													background: transparent;
													border-radius: 0em;
													border-width: 0em;
												}

												.filepond--image-preview {
													background: white;
													height: 100%;
													width: 100%;
												}

												.filepond--item > .filepond--panel .filepond--panel-bottom {
													box-shadow: none;
													}

												.filepond--image-preview-overlay svg {
													display: none;
												}

												.filepond--file-info {
													display: none;
													top: 10em;
													color: black;
												}

												.filepond--file-status {
													display: none;
												}
												
												.filepond--file-action-button filepond--action-remove-item {
													display: none;
												}


												
											</style>
											
											<input type="file" 
												class="filepond"
												name="filepond"
												accept="image/png, image/jpeg"
											/>
										</div>


								  </div>
								</div>
							</div>


						  
							<div class="col-md-8 offset-md-2">
							  <div class="card">
								<div class="card-header">
								  <h5 class="card-title mb-0">4. Update entry</h5>
								</div>
								<div class="card-body">

									<div class="form-check">
										<input type="radio" class="form-check-input" name="flexRadioDefault" id="entrypublic" value="public" autocomplete="off" <% if (entry.privacy == "public") { %> checked <% } %>>
										<label class="form-check-label" for="entrypublic">Public</label>
								  	</div>
									<div class="form-check pb-3">
										<input type="radio" class="form-check-input" name="flexRadioDefault" id="entryprivate" value="private" autocomplete="off" <% if (entry.privacy == "private") { %> checked <% } %>>
										<label class="form-check-label" for="entryprivate">Private</label>
									</div>

								  <button type="submit" onclick="return confirm('Are you sure you want to delete this entry? This action is irreversible.');" formaction="/entry/<%= entry._id %>/delete?_csrf=<%=csrfToken%>" class="btn btn-danger">Delete</button>
								  <button type="submit" onclick="showLoader()" id="submit-entry" formaction="/entry/<%= entry._id %>/edit?_csrf=<%=csrfToken%>" class="btn btn-primary">Update</button>
								</div>
							  </div>
							</div>
						  </form>
						  
					</div>

				</div>
			</main>

			<%- include('includes/footer') %>

	<script>
		

    var form = document.getElementById("edit-entry")
	var overlay = document.getElementById("overlay")
    var overlayQuote = document.getElementById("overlay-quote");
        
        
    function showLoader() {
		if (form.checkValidity()) {
			overlay.removeAttribute("hidden")
            randomIndex = Math.ceil((Math.random()*randomQuotes.length-1));
            newQuote = randomQuotes[randomIndex];
            overlayQuote.innerHTML = newQuote;

		}
	}



		function deletePhoto() {
			let photoModule = document.getElementById('photo-module')
			let uploadModule = document.getElementById('upload-module')
			let photoButton = document.getElementById('photo-button')
			document.getElementById('photoindicator').value = 'delete'
			photoButton.hidden = true
			uploadModule.hidden = false
			photoModule.hidden = true
		}

		// Add event trigger for change to textareas with limit
		$(document).on("input", "textarea[word-limit=true]", function() {


		// Get individual limits
		thisMin = parseInt($(this).attr("min-words"));
		thisMax = parseInt($(this).attr("max-words"));
		const submit = document.querySelector("#submit-entry")
		const coordinates = document.querySelector('#lnglatcoordinates')

		// Create array of words, skipping the blanks
		var removedBlanks = [];
		removedBlanks = $(this).val().split(/\s+/).filter(Boolean);

		// Get word count
		var wordCount = removedBlanks.length;

		// Remove extra words from string if over word limit
		if (wordCount > thisMax) {
				
			// Trim string, use slice to get the first 'n' values
			var trimmed = removedBlanks.slice(0, thisMax ).join(" ");
			
			// Add space to ensure further typing attempts to add a new word (rather than adding to penultimate word)
			$(this).val(trimmed + " ");
			
			}
			

		// Compare word count to limits and print message as appropriate
		if ( wordCount < thisMin) {

			$(this).parent().children(".writing_error").text("Word count under " + thisMin + ".");

		} else if (wordCount > thisMax) {

			$(this).parent().children(".writing_error").text("Word count over " + thisMax + ".");

		} else {
			
			// No issues, remove warning message
			$(this).parent().children(".writing_error").text("");

		}

		if ( wordCount < thisMin) {
		
		submit.setAttribute("disabled", true);

			} else if (wordCount > thisMax) {

				submit.setAttribute("disabled", true);
			
			} else {
				
				// No issues, remove warning message
				submit.removeAttribute("disabled");

			}

			if (coordinates.value() == "") {
				submit.setAttribute("disabled", true);
			} else {
				submit.removeAttribute("disabled");
			}

		});

		function convertToPlain(html){
				var tempDivElement = document.createElement("entrymarkers");
				tempDivElement.innerHTML = html;
				return tempDivElement.textContent || tempDivElement.innerText || "";
			}

	var htmlString= "<entrymarkers><%=entrymarker%></entrymarkers>";

	var marker = convertToPlain(htmlString)

	var singlemarker = JSON.parse(marker)


	mapboxgl.accessToken = 'pk.eyJ1IjoiY25oMTE4NyIsImEiOiJja28wZTZpNGowY3RoMnBvaTgxZ2M5c3ljIn0.t3_T3EN00e5w7D0et4hf-w';
		const entrymap = new mapboxgl.Map({
			container: 'entrymap', // container ID
			//style: 'mapbox://styles/mapbox/light-v10',
  			//style: 'mapbox://styles/cnh1187/ckwqxzg5w196n14ml3snpoo7m', // heimursaga custom style blue water
	  		style: 'mapbox://styles/cnh1187/ckwqyxju41h0c14o695dd3fdt', // heimursaga custom style grey water
			center: singlemarker.properties.coordinates,
			zoom: 6,// starting zoom
			attributionControl: false,
			});

			entrymap.on('load', () => {
				entrymap.addSource('10m-bathymetry-81bsvj', {
				type: 'vector',
				url: 'mapbox://mapbox.9tm8dx88'
				});
				
				entrymap.addLayer(
				{
				'id': '10m-bathymetry-81bsvj',
				'type': 'fill',
				'source': '10m-bathymetry-81bsvj',
				'source-layer': '10m-bathymetry-81bsvj',
				'layout': {},
				'paint': {
				'fill-outline-color': 'hsla(337, 82%, 62%, 0)',
				// cubic bezier is a four point curve for smooth and precise styling
				// adjust the points to change the rate and intensity of interpolation
				'fill-color': [
				'interpolate',
				['cubic-bezier', 0, 0.5, 1, 0.5],
				['get', 'DEPTH'],
				200,
				'#8c8c8c',
				9000,
				'#4d4d4d'
				]
				}
				},
				'land-structure-polygon'
				);
				});


			var coordinatesGeocoder = function (query) {
				// Match anything which looks like
				// decimal degrees coordinate pair.
				var matches = query.match(
				/^[ ]*(?:Lat: )?(-?\d+\.?\d*)[, ]+(?:Lng: )?(-?\d+\.?\d*)[ ]*$/i
				);
				if (!matches) {
				return null;
				}
				
				function coordinateFeature(lng, lat) {
				return {
				center: [lng, lat],
				geometry: {
				type: 'Point',
				coordinates: [lng, lat]
				},
				place_name: 'Lat: ' + lat + ' Lng: ' + lng,
				place_type: ['coordinate'],
				properties: {},
				type: 'Feature'
				};
				}
				
				var coord1 = Number(matches[1]);
				var coord2 = Number(matches[2]);
				var geocodes = [];
				
				if (coord1 < -90 || coord1 > 90) {
				// must be lng, lat
				geocodes.push(coordinateFeature(coord1, coord2));
				}
				
				if (coord2 < -90 || coord2 > 90) {
				// must be lat, lng
				geocodes.push(coordinateFeature(coord2, coord1));
				}
				
				if (geocodes.length === 0) {
				// else could be either lng, lat or lat, lng
				geocodes.push(coordinateFeature(coord1, coord2));
				geocodes.push(coordinateFeature(coord2, coord1));
				}
				
				return geocodes;
				};

			entrymap.addControl(
				new MapboxGeocoder({
				accessToken: mapboxgl.accessToken,
				localGeocoder: coordinatesGeocoder,
				marker: false,
				mapboxgl: mapboxgl,
				})
			);
			
			entrymap.addControl(new mapboxgl.GeolocateControl({
				positionOptions: {
				enableHighAccuracy: true
				},
				trackUserLocation: true
				})
			);

			var marker = new mapboxgl.Marker({
				color: '#ac6d46',
				draggable: false,
				})
				.setLngLat([-119.5591, 37.715])
				.addTo(entrymap);


			entrymap.on('move', function (e) {
				//console.log(`Current Map Center: ${entrymap.getCenter()}`);
				marker.setLngLat(entrymap.getCenter());
				var lngLat = marker.getLngLat();
				var entryCoordinates = marker.getLngLat();
				coordinates.innerHTML = [lngLat.lng,lngLat.lat];
				coordinates.style.display = 'block';
			});

		document.querySelector("#post-body")
			.addEventListener("keyup", function countWord() {
			let res = [];
			let str = this.value.replace(/[\t\n\r\.\?\!]/gm, " ").split(" ");
			str.map((s) => {
				let trimStr = s.trim();
				if (trimStr.length > 0) {
				res.push(trimStr);
				}
			});
		document.querySelector("#show").innerText = res.length;
		});

		function myFunction() {
			var copyText = document.getElementById("coordinates").value;
			document.getElementById("lnglatcoordinates").value = copyText;
			}


		document.addEventListener("DOMContentLoaded", function() {
			// Select2
			$(".select2").each(function() {
				$(this)
					.wrap("<div class=\"position-relative\"></div>")
					.select2({
						placeholder: "Select value",
						dropdownParent: $(this).parent()
					});
			})
			// Daterangepicker
			$("input[name=\"daterange\"]").daterangepicker({
				opens: "left"
			});
			$("input[name=\"datetimes\"]").daterangepicker({
				timePicker: true,
				opens: "left",
				startDate: moment().startOf("hour"),
				endDate: moment().startOf("hour").add(32, "hour"),
				locale: {
					format: "M/DD hh:mm A"
				}
			});
			$("input[name=\"datesingle\"]").daterangepicker({
				singleDatePicker: true,
				showDropdowns: true
			});
			var start = moment().subtract(29, "days");
			var end = moment();

			function cb(start, end) {
				$("#reportrange span").html(start.format("MMMM D, YYYY") + " - " + end.format("MMMM D, YYYY"));
			}
			$("#reportrange").daterangepicker({
				startDate: start,
				endDate: end,
				ranges: {
					"Today": [moment(), moment()],
					"Yesterday": [moment().subtract(1, "days"), moment().subtract(1, "days")],
					"Last 7 Days": [moment().subtract(6, "days"), moment()],
					"Last 30 Days": [moment().subtract(29, "days"), moment()],
					"This Month": [moment().startOf("month"), moment().endOf("month")],
					"Last Month": [moment().subtract(1, "month").startOf("month"), moment().subtract(1, "month").endOf("month")]
				}
			}, cb);
			cb(start, end);
			// Datetimepicker
			$('#datetimepicker-minimum').datetimepicker();
			$('#datetimepicker-view-mode').datetimepicker({
				viewMode: 'years'
			});
			$('#datetimepicker-time').datetimepicker({
				format: 'LT'
			});
			$('#datetimepicker-date').datetimepicker({
				format: 'L'
			});
		});	

	</script>
</body>

</html>